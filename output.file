// See https://aka.ms/new-console-template for more information
using System;

public delegate void CallBack();

public class Facade
{
    private IDoTask taskRunner(IDoTask task) {
        task.doTask(); 
        return task;
    }

    private void printTaskResult(string taskId, IDoTask task, CallBack inputDataCallback) {
        Console.WriteLine($"---{taskId} is running---");
        
        inputDataCallback();

        Console.WriteLine($"{taskId} result: {task.getResult()}");

        Console.WriteLine($"---END {taskId}---\n");
    }

    public void doFirstTask() {
        double a = 1;
        double b = 2;
        double c = 3;

        this.printTaskResult("First task", this.taskRunner(new FirstTask(a, b, c)), () => {
            Console.WriteLine($"a: {a}");
            Console.WriteLine($"b: {b}");
            Console.WriteLine($"c: {c}");
        });
    }

    public void doSecondTask() {
        int m = 1;
            
        this.printTaskResult("Second task", this.taskRunner(new SecondTask(m)), () => {
            Console.WriteLine($"M: {m}");
        });
    }

    public void doThirdTask() {
        this.printTaskResult("ThirdTask task", this.taskRunner(new ThirdTask()), () => {});
    }

    public void doFourthTask() {
        double a = 1;
        double b = 2;
        double c = 7;
        double d = 8;

        this.printTaskResult("Fourth task", this.taskRunner(new FourthTask(a, b, c, d)), () => {
            Console.WriteLine($"a: {a}");
            Console.WriteLine($"b: {b}");
            Console.WriteLine($"c: {c}");
            Console.WriteLine($"d: {d}");
        });
    }

    public void runAll() {
        this.doFirstTask(); 
        this.doSecondTask();
        this.doThirdTask();
        this.doFourthTask();
    }
}

public class Lab1
{
    public static void Main()
    {
        Facade facade = new Facade();
        facade.runAll();
    }
}
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v7.0", FrameworkDisplayName = ".NET 7.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("oop")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("oop")]
[assembly: System.Reflection.AssemblyTitleAttribute("oop")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

public abstract class DoTask<T> : IDoTask {
    protected T? result;

    public abstract void doTask();

    object IDoTask.getResult() {
        return (T)result;
    }
}

// See https://aka.ms/new-console-template for more information
public class SecondTask : DoTask<double>
{
    private int m;

    public SecondTask(int m) {
        this.m = m; 
    }

    public override void doTask()
    {
        switch (m)
        {
            case 1:
            case 2:
                this.result = Math.Log(m + Math.Pow(m, 2)) + Math.Sqrt(14);
                break;
            case 3:
                this.result = (m + 3) / Math.Log(m);
                break;
            case 4:
            case 7:
                this.result = Math.Pow(m, 3) + 2 * (m * m + 1);
                break;
            case 5:
                this.result = 744 - Math.Pow(m, 2) * Math.Pow(Math.Sin(m), 2);
                break;
            case 6:
                this.result = Math.Log(1 + Math.Sqrt(m));
                break;
            default:
                Console.Write("OMG there is no [m] in range(1, 7)");
                break;
        } 
    }
}

// See https://aka.ms/new-console-template for more information
public class ThirdTask : DoTask<(double sum1, double sum2, double sum3)> {
    private const double accurancy = 0.05;

    private double findSum1() {
        double sum = 0; 
        double current = 0;
        double prev = 0;

        for (int i = 0; i < int.MaxValue; i++) {
            current = Math.Pow(Math.E, -Math.Sqrt(i));
            sum += current;
            if (Math.Abs(prev - current) <= accurancy) {
                break;
            }
            prev = current;
        }

        return sum;
    }

    private double findSum2() {
        double sum = 1;

        for (double i = 1, j = 2; i <= 31 && j <= 32; i++,j++) {
            sum *= i / j;
        }

        return sum;
    }

    private double findSum3() {
        double sum = 0;

        for (int k = 1; k < 10; k++) {
            double temp = 0;
            for (int i = 1; i < 15; i++) {
                temp += Math.Pow(k - i, 2);
            }
            sum += Math.Pow(k, 3) * temp;
        }

        return sum;
    }

    public override void doTask() {
        this.result = (findSum1(), findSum2(), findSum3());
    }
}

// See https://aka.ms/new-console-template for more information
public class FirstTask : DoTask<(double a, double b, double c)>
{
    private double a = 0;
    private double b = 0;
    private double c = 0;

    public FirstTask(double a, double b, double c) {
        this.a = a;    
        this.b = b;
        this.c = c;
    }

    public override void doTask()
    {
        if (b < a && a < c)
        {
            a *= 2;
            b *= 2;
            c *= 2;
        }
        else if (a < b && b < c)
        {
            c *= c;
        }
        else
        {
            double[] array = { a, b, c };
            double min = Double.MinValue;
            for (int i = 0; i < array.Length; i++)
            {
                if (array[i] < min)
                {
                    min = array[i];
                }
            }
            a = min;
            b = min;
            c = min;
        }
        this.result = (a, b, c);
    }
}

public class FourthTask : DoTask <double>{
    private double a = 0;
    private double b = 0;
    private double c = 0;
    private double d = 0;

    public FourthTask(double a, double b, double c, double d) {
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
    }

    public override void doTask()
    {
        double[,] areas = { { a, b, c }, { b, c, d }, { a, c, d } };
        for (int i = 0; i < areas.GetLength(0); i++) {
            double s = 0;

            double x = areas[i, 0];
            double y = areas[i, 1];
            double z = areas[i, 2];

            double p = (x + y+ z) / 2;

            s = Math.Sqrt(p * (Math.Sqrt(p - x) * (Math.Sqrt(p - y) * (Math.Sqrt(p - z)))));
            if (s > this.result) {
                this.result = s;
            }
        }
    }
}
public interface IDoTask {
    object getResult();
    void doTask();
}


﻿// See https://aka.ms/new-console-template for more information
using System;

public delegate void CallBack();

public class Facade
{
    private IDoTask taskRunner(IDoTask task) {
        task.doTask(); 
        return task;
    }

    private void printTaskResult(string taskId, IDoTask task, CallBack inputDataCallback) {
        Console.WriteLine($"---{taskId} is running---");
        
        inputDataCallback();

        Console.WriteLine($"{taskId} result: {task.getResult()}");

        Console.WriteLine($"---END {taskId}---\n");
    }

    public void doFirstTask() {
        double a = 1;
        double b = 2;
        double c = 3;

        this.printTaskResult("First task", this.taskRunner(new FirstTask(a, b, c)), () => {
            Console.WriteLine($"a: {a}");
            Console.WriteLine($"b: {b}");
            Console.WriteLine($"c: {c}");
        });
    }

    public void doSecondTask() {
        int m = 1;
            
        this.printTaskResult("Second task", this.taskRunner(new SecondTask(m)), () => {
            Console.WriteLine($"M: {m}");
        });
    }

    public void doThirdTask() {
        this.printTaskResult("ThirdTask task", this.taskRunner(new ThirdTask()), () => {});
    }

    public void doFourthTask() {
        double a = 1;
        double b = 2;
        double c = 7;
        double d = 8;

        this.printTaskResult("Fourth task", this.taskRunner(new FourthTask(a, b, c, d)), () => {
            Console.WriteLine($"a: {a}");
            Console.WriteLine($"b: {b}");
            Console.WriteLine($"c: {c}");
            Console.WriteLine($"d: {d}");
        });
    }

    public void runAll() {
        this.doFirstTask(); 
        this.doSecondTask();
        this.doThirdTask();
        this.doFourthTask();
    }
}

public class Lab1
{
    public static void Main()
    {
        Facade facade = new Facade();
        facade.runAll();
    }
}
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v7.0", FrameworkDisplayName = ".NET 7.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("oop")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("oop")]
[assembly: System.Reflection.AssemblyTitleAttribute("oop")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

public abstract class DoTask<T> : IDoTask {
    protected T? result;

    public abstract void doTask();

    object IDoTask.getResult() {
        return (T)result;
    }
}

// See https://aka.ms/new-console-template for more information
public class SecondTask : DoTask<double>
{
    private int m;

    public SecondTask(int m) {
        this.m = m; 
    }

    public override void doTask()
    {
        switch (m)
        {
            case 1:
            case 2:
                this.result = Math.Log(m + Math.Pow(m, 2)) + Math.Sqrt(14);
                break;
            case 3:
                this.result = (m + 3) / Math.Log(m);
                break;
            case 4:
            case 7:
                this.result = Math.Pow(m, 3) + 2 * (m * m + 1);
                break;
            case 5:
                this.result = 744 - Math.Pow(m, 2) * Math.Pow(Math.Sin(m), 2);
                break;
            case 6:
                this.result = Math.Log(1 + Math.Sqrt(m));
                break;
            default:
                Console.Write("OMG there is no [m] in range(1, 7)");
                break;
        } 
    }
}

// See https://aka.ms/new-console-template for more information
public class ThirdTask : DoTask<(double sum1, double sum2, double sum3)> {
    private const double accurancy = 0.05;

    private double findSum1() {
        double sum = 0; 
        double current = 0;
        double prev = 0;

        for (int i = 0; i < int.MaxValue; i++) {
            current = Math.Pow(Math.E, -Math.Sqrt(i));
            sum += current;
            if (Math.Abs(prev - current) <= accurancy) {
                break;
            }
            prev = current;
        }

        return sum;
    }

    private double findSum2() {
        double sum = 1;

        for (double i = 1, j = 2; i <= 31 && j <= 32; i++,j++) {
            sum *= i / j;
        }

        return sum;
    }

    private double findSum3() {
        double sum = 0;

        for (int k = 1; k < 10; k++) {
            double temp = 0;
            for (int i = 1; i < 15; i++) {
                temp += Math.Pow(k - i, 2);
            }
            sum += Math.Pow(k, 3) * temp;
        }

        return sum;
    }

    public override void doTask() {
        this.result = (findSum1(), findSum2(), findSum3());
    }
}

// See https://aka.ms/new-console-template for more information
public class FirstTask : DoTask<(double a, double b, double c)>
{
    private double a = 0;
    private double b = 0;
    private double c = 0;

    public FirstTask(double a, double b, double c) {
        this.a = a;    
        this.b = b;
        this.c = c;
    }

    public override void doTask()
    {
        if (b < a && a < c)
        {
            a *= 2;
            b *= 2;
            c *= 2;
        }
        else if (a < b && b < c)
        {
            c *= c;
        }
        else
        {
            double[] array = { a, b, c };
            double min = Double.MinValue;
            for (int i = 0; i < array.Length; i++)
            {
                if (array[i] < min)
                {
                    min = array[i];
                }
            }
            a = min;
            b = min;
            c = min;
        }
        this.result = (a, b, c);
    }
}

public class FourthTask : DoTask <double>{
    private double a = 0;
    private double b = 0;
    private double c = 0;
    private double d = 0;

    public FourthTask(double a, double b, double c, double d) {
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
    }

    public override void doTask()
    {
        double[,] areas = { { a, b, c }, { b, c, d }, { a, c, d } };
        for (int i = 0; i < areas.GetLength(0); i++) {
            double s = 0;

            double x = areas[i, 0];
            double y = areas[i, 1];
            double z = areas[i, 2];

            double p = (x + y+ z) / 2;

            s = Math.Sqrt(p * (Math.Sqrt(p - x) * (Math.Sqrt(p - y) * (Math.Sqrt(p - z)))));
            if (s > this.result) {
                this.result = s;
            }
        }
    }
}
public interface IDoTask {
    object getResult();
    void doTask();
}


